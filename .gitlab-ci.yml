image: docker:latest

services:
  - docker:dind

stages:
  - build
  - to_docker
  - to_vm

Build:
  stage: build
  only:
#    - schedules
    - master
  tags:
    - docker

  before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  - docker info

  script: 
    - docker build --pull --tag "$CI_REGISTRY_IMAGE":latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
#    - docker run $CI_REGISTRY_IMAGE /script/to/run/tests
#    - docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:latest
    - docker push "$CI_REGISTRY_IMAGE":latest

Deploy to Docker:
  stage: to_docker
  only:
    - master
  tags:
    - docker
  before_script:
    - mkdir -p ~/.ssh
    - echo -e "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600  ~/.ssh/id_rsa
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'   
  script: 
    - ls -la 
    - >
      ssh -p443 ec2-user@$STAGING_SERVER "
      sudo docker stop my_app;
      sudo docker rm my_app;
      sudo docker run -d -p 8888:3000 --name my_app $CI_REGISTRY_IMAGE"

Deploy to VM:
  artifacts:
    paths:
      - ./
  stage: to_vm
  only:
    - schedules

  tags:
    - docker
    
  before_script:
    # Generates to connect to the AWS unit the SSH key.
    - mkdir -p ~/.ssh
    - echo -e "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    # Sets the permission to 600 to prevent a problem with AWS
    # that it's too unprotected.
    - chmod 600  ~/.ssh/id_rsa
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'   
  script: 
    - ls -la    
    - ssh -p443 ec2-user@$STAGING_SERVER "mkdir staging/_tmp && ls -la"
    - scp -P443 -r ./app/* ec2-user@$STAGING_SERVER:staging/_tmp
    - ssh -p443 ec2-user@$STAGING_SERVER "mv staging/live staging/_old && mv staging/_tmp staging/live"
    - ssh -p443 ec2-user@$STAGING_SERVER "rm -rf staging/_old  && cd staging/live && npm install && npm start"
  environment:     
    name: staging     
    # Exposes a button that when clicked take you to the defined URL:
    url: http://$STAGING_SERVER:8080/ 
