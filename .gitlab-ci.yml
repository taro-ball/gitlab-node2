# Reference: https://www.exclamationlabs.com/blog/continuous-deployment-to-npm-using-gitlab-ci/

# GitLab uses docker in the background, so we need to specify the 
# image versions. This is useful because we're freely to use
# multiple node versions to work with it. They come from the docker
# repo.
# Uses NodeJS V 9.4.0
image: node:9.4.0

# And to cache them as well.
#cache:
#  paths:
#    - node_modules/

# We tell GitLab to install all the packages
# before running anything.
# Docker images come with yarn preinstalled
#before_script:  
#  - apt-get update -qq && apt-get install

# You specify the stages. Those are the steps that GitLab will go through 
# Order matters. 
stages:
#  - build
  - staging

Deploy to Staging:
  artifacts:
    paths:
      - ./
  stage: staging
  tags:
    - docker
  before_script:
    # Generates to connect to the AWS unit the SSH key.
    - mkdir -p ~/.ssh
    - echo -e "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    # Sets the permission to 600 to prevent a problem with AWS
    # that it's too unprotected.
    - chmod 600  ~/.ssh/id_rsa
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'   
  script: 
    - ls -la    
    - ssh -p443 ec2-user@$STAGING_SERVER "mkdir staging/_tmp && ls -la"
    - scp -P443 -r ./app/* ec2-user@$STAGING_SERVER:staging/_tmp
    - ssh -p443 ec2-user@$STAGING_SERVER "mv staging/live staging/_old && mv staging/_tmp staging/live"
    - ssh -p443 ec2-user@$STAGING_SERVER "rm -rf staging/_old  && cd staging/live && npm install && npm start"
  environment:     
    name: staging     
    # Exposes a button that when clicked take you to the defined URL:
    url: http://$STAGING_SERVER:8080/ 
